#!/bin/bash
# Set GAMEDIR to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/patchlog.txt"

# Redirect output and error to the log file
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Exports
export DATADIR="$GAMEDIR/assets"
export DATAFILE="utyellow.port"
export LD_LIBRARY_PATH="/usr/lib:$GAMEDIR/lib:$GAMEDIR/tools/libs:$LD_LIBRARY_PATH"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export TOOLDIR="$GAMEDIR/tools"
export TMPDIR="$GAMEDIR/tmp"
export PATH="$GAMEDIR/tools:$PATH"

# Permissions
chmod 666 /dev/uinput
chmod 777 "$TOOLDIR/gmKtool.py"
chmod 777 "$TOOLDIR/oggenc"

cd "$GAMEDIR"

apply_xdelta() {
    # Check if the data.win file exists and apply xdelta
    if [ -f "$DATADIR/data.win" ]; then
        echo "Applying xdelta patch"
        if [ "$(md5sum "$DATADIR/data.win" | awk '{print $1}')" == "db15b9fb5662207e3d4b329d1c00bc70" ]; then
            # English v1.1.0
            output=$($controlfolder/xdelta3 -d -s "$DATADIR/data.win" -f "./tools/patches/utyellow-en.xdelta" "$DATADIR/game.droid" 2>&1)
        elif [ "$(md5sum "$DATADIR/data.win" | awk '{print $1}')" == "328e499caf024644a9399b49afd4c8b7" ]; then
            # Espanol
            output=$($controlfolder/xdelta3 -d -s "$DATADIR/data.win" -f "./tools/patches/utyellow-es.xdelta" "$DATADIR/game.droid" 2>&1)
        fi
        
        # Success / Failure
        if [ $? -eq 0 ]; then
            echo "Patch applied successfully"
            echo "$output"
            rm "$DATADIR/data.win"
        else
            echo "Failed to apply patch"
            echo "$output"
            exit 1
        fi
    else
        echo "No data.win file found!"
        exit 1
    fi
}

compress_audio() {
    echo "Compressing audio..."
    # Clear out the temporary directory
    mkdir -p "$TMPDIR"
    rm -rf $TMPDIR/*

    # Run the compression tool
    echo "Running GMTools on data and audiogroups."
    $PYTHON $TOOLDIR/gmKtool.py -vv -m 1000 -r -b 64 -d "$TMPDIR" "$DATADIR/game.droid"

    if [ $? -eq 0 ]; then
        echo "Compression completed successfully."
        mv "$TMPDIR/"* "$DATADIR"
        echo "Moved compressed files to $DATADIR."
        rm -rf "$TMPDIR"
        echo "Temporary directory $TMPDIR removed."
        echo "Audio compression applied successfully."
        sleep 1
    else
        echo "Audio compression failed."
        echo "Cleaning up temporary directory $TMPDIR."
        rm -rf "$TMPDIR"
        sleep 1
    fi
}

zip_archive() {
        echo "Finishing up..."
        zip -r -0 $DATAFILE ./assets/
        mkdir -p saves
        rm -rf $DATADIR/*
        sleep 1
}

process_game() {
    # Do some prep
    rm -rf $DATADIR/*.exe $DATADIR/.gitkeep
    mv $DATADIR/splash.png .
    apply_xdelta
    compress_audio
    zip_archive
    sleep 1
	
    # Final completion message
    echo "Patching process complete!"
}

# Call the function
process_game
